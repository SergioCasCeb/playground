/*
 *  Copyright (c) 2020 Contributors to the Eclipse Foundation
 *
 *  See the NOTICE file(s) distributed with this work for additional
 *  information regarding copyright ownership.
 *
 *  This program and the accompanying materials are made available under the
 *  terms of the Eclipse Public License v. 2.0 which is available at
 *  http://www.eclipse.org/legal/epl-2.0, or the W3C Software Notice and
 *  Document License (2015-05-13) which is available at
 *  https://www.w3.org/Consortium/Legal/2015/copyright-software-and-document.
 *
 *  SPDX-License-Identifier: EPL-2.0 OR W3C-20150513
 */

const { Info, Tag, ExternalDocs, Server } = require("./definitions");
const { copySpecExtensions } = require("./utils");

/**
 * Generate the root level AsyncAPI general information
 * @param {object} td Input Td
 */
function genInfo(td) {
    const title = td.title === undefined ? "Thing Description Playground autogenerated AsyncAPI object" : td.title;
    const version = td.version && td.version.instance ? td.version.instance : "unknown";

    let contact;
    // add support contact
    if (td.support) {
        if (td.support.startsWith("mailto:")) {
            contact = { email: td.support.slice(7) };
        } else if (td.support.startsWith("http://") || td.support.startsWith("https://")) {
            contact = { url: td.support };
        } else {
            contact = { "x-uri": td.support };
        }
    }

    const info = new Info(title, version, {
        description: td.description,
        contact,
    });

    // add optional custom fields
    const tdOpts = ["@context", "@type", "created", "descriptions", "links", "modified", "name", "titles"];
    copySpecExtensions(tdOpts, td, info);

    return info;
}

/**
 * Generate AsyncAPI-tags for the TD Properties, Actions and Events
 * if the respective type of interaction is present in the input TD
 * @param {object} td The input TD
 */
function genTags(td) {
    const tags = [];

    // add normal interactions
    const interactions = {
        properties: new Tag("properties", {
            description:
                "A property can expose a variable of a Thing, this variable might be readable, writable and/or observable.",
            externalDocs: new ExternalDocs(
                "https://www.w3.org/TR/wot-thing-description/#propertyaffordance",
                "Find out more about Property Affordances."
            ),
        }),
        actions: new Tag("actions", {
            description: "An action can expose something to be executed by a Thing, an action can be invoked.",
            externalDocs: new ExternalDocs(
                "https://www.w3.org/TR/wot-thing-description/#actionaffordance",
                "Find out more about Action Affordances."
            ),
        }),
        events: new Tag("events", {
            description:
                "An event can expose a notification by a Thing, this notification can be subscribed and/or unsubscribed.",
            externalDocs: new ExternalDocs(
                "https://www.w3.org/TR/wot-thing-description/#eventaffordance",
                "Find out more about Event Affordances."
            ),
        }),
    };
    Object.keys(interactions).forEach((interactionType) => {
        if (td[interactionType] !== undefined) {
            tags.push(interactions[interactionType]);
        }
    });

    return tags;
}

function genBaseServer(td, security) {
    const servers = {};
    if (td.base) {
        if (td.base.startsWith("mqtt")) {
            servers.base = new Server(td.base, "mqtt", security);
        }
    }
    return servers;
}

module.exports = { genInfo, genTags, genBaseServer };
